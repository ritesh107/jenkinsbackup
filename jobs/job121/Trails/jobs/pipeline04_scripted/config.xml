<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1295.v395eb_7400005">
  <actions/>
  <description>pipeline04</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.7.13">
      <gitLabConnection></gitLabConnection>
      <jobCredentialId></jobCredentialId>
      <useAlternativeCredential>false</useAlternativeCredential>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.plugins.throttleconcurrents.ThrottleJobProperty plugin="throttle-concurrents@2.13">
      <maxConcurrentPerNode>0</maxConcurrentPerNode>
      <maxConcurrentTotal>0</maxConcurrentTotal>
      <categories class="java.util.concurrent.CopyOnWriteArrayList"/>
      <throttleEnabled>false</throttleEnabled>
      <throttleOption>project</throttleOption>
      <limitOneJobWithMatchingParams>false</limitOneJobWithMatchingParams>
      <paramsToUseForLimit></paramsToUseForLimit>
    </hudson.plugins.throttleconcurrents.ThrottleJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3659.v582dc37621d8">
    <script>node {
    stage(&apos;Checkout&apos;) {
        checkout([
            $class: &apos;GitSCM&apos;,
            branches: [[name: &apos;*/master&apos;], [name: &apos;*/ninja&apos;]],
            userRemoteConfigs: [[url: &apos;https://github.com/opstree/spring3hibernate.git&apos;]]
        ])
    }

    stage(&apos;Build&apos;) {
        sh &apos;mvn clean package&apos;
        // Add commands to build application
    }

    stage(&apos;Test&apos;) {
        if (params.skip_test == &apos;Do_not&apos;) {
            stage(&apos;Code Stability Tests&apos;) {
                sh &apos;echo &quot;Running unit tests&quot;&apos;
                sh &apos;mvn surefire:test&apos;
                // Add commands to run unit tests
            }

            stage(&apos;Code Quality Analysis Tests&apos;) {
                sh &apos;echo &quot;Running unit tests&quot;&apos;
                sh &apos;mvn checkstyle:checkstyle&apos;
                recordIssues tools: [checkStyle(pattern: &apos;**/checkstyle-result.xml&apos;)]
                // Add commands to run unit tests
            }

            stage(&apos;Code Coverage Tests&apos;) {
                sh &apos;echo &quot;Running integration tests&quot;&apos;
                sh &apos;mvn cobertura:cobertura&apos;
                recordIssues tools: [findBugs(pattern: &apos;**/findbugsXml.xml&apos;, useRankAsPriority: true)]
                // Add commands to run integration tests
            }
        }
    }

    stage(&apos;Report Generation&apos;) {
        echo &apos;Generating Report&apos;
        sh &apos;mvn checkstyle:checkstyle &gt;&gt; /var/lib/jenkins/report_checkstyle.html&apos;
        sh &apos;mvn cobertura:cobertura &gt;&gt; /var/lib/jenkins/report_cobertura.html&apos;
    }

    stage(&apos;Artifact archieve&apos;) {
        archiveArtifacts &apos;target/*.jar, target/*.war&apos;
    }

    stage(&apos;Deploy&apos;) {
        sh &apos;echo &quot;Deploying the application&quot;&apos;
        // Add commands to deploy application
    }
}

post {
    always {
            // Actions to be executed always, regardless of the pipeline result
        }
        success {
            slackSend(channel: &apos;jenkins_report&apos;, color: &apos;#439FE0&apos;, message: &quot;JOB_NAME: ${env.JOB_NAME} BUILD_ID: ${env.BUILD_ID} WORKSPACE: ${env.WORKSPACE} Successful&quot;, teamDomain: &apos;opstree&apos;, tokenCredentialId: &apos;slack-tokenn&apos;, username: &apos;Ritesh Kumar&apos;)
            emailext(body: &apos;Build Success&apos;, recipientProviders: [developers()], replyTo: &apos;riteshkuma19325@gmail.com&apos;, subject: &apos;Pipeline 04&apos;, to: &apos;riteshkumar19325@gmail.com&apos;)
            // Actions to be executed only if the pipeline succeeds
        }
        failure {
            // Actions to be executed only if the pipeline fails
        }
        unstable {
            // Actions to be executed only if the pipeline is unstable
        }
        changed {
            // Actions to be executed only if the pipeline state changes
        }
   
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
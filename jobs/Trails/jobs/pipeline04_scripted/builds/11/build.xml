<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1295.v395eb_7400005">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>ritesh</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@656.va_a_ceeb_6ffb_f7">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
  </actions>
  <queueId>741</queueId>
  <timestamp>1685559830269</timestamp>
  <startTime>1685559830276</startTime>
  <result>FAILURE</result>
  <duration>243</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>node {
    tools {
    git &apos;git&apos;    
    }
    stage(&apos;Checkout&apos;) {
        checkout([
            $class: &apos;GitSCM&apos;,
            branches: [[name: &apos;*/master&apos;], [name: &apos;*/ninja&apos;]],
            userRemoteConfigs: [[url: &apos;https://github.com/opstree/spring3hibernate.git&apos;]]
        ])
    }

    stage(&apos;Build&apos;) {
        sh &apos;mvn clean package&apos;
        // Add commands to build application
    }

    stage(&apos;Test&apos;) {
        if (params.skip_test == &apos;Do_not&apos;) {
            stage(&apos;Code Stability Tests&apos;) {
                sh &apos;echo &quot;Running unit tests&quot;&apos;
                sh &apos;mvn surefire:test&apos;
                // Add commands to run unit tests
            }

            stage(&apos;Code Quality Analysis Tests&apos;) {
                sh &apos;echo &quot;Running unit tests&quot;&apos;
                sh &apos;mvn checkstyle:checkstyle&apos;
                recordIssues tools: [checkStyle(pattern: &apos;**/checkstyle-result.xml&apos;)]
                // Add commands to run unit tests
            }

            stage(&apos;Code Coverage Tests&apos;) {
                sh &apos;echo &quot;Running integration tests&quot;&apos;
                sh &apos;mvn cobertura:cobertura&apos;
                recordIssues tools: [findBugs(pattern: &apos;**/findbugsXml.xml&apos;, useRankAsPriority: true)]
                // Add commands to run integration tests
            }
        }
    }

    stage(&apos;Report Generation&apos;) {
        echo &apos;Generating Report&apos;
        sh &apos;mvn checkstyle:checkstyle &gt;&gt; /var/lib/jenkins/report_checkstyle.html&apos;
        sh &apos;mvn cobertura:cobertura &gt;&gt; /var/lib/jenkins/report_cobertura.html&apos;
    }

    stage(&apos;Artifact archieve&apos;) {
        archiveArtifacts &apos;target/*.jar, target/*.war&apos;
    }

    stage(&apos;Deploy&apos;) {
        sh &apos;echo &quot;Deploying the application&quot;&apos;
        // Add commands to deploy application
    }
}

post {
    always {
            // Actions to be executed always, regardless of the pipeline result
        }
        success {
            slackSend(channel: &apos;jenkins_report&apos;, color: &apos;#439FE0&apos;, message: &quot;JOB_NAME: ${env.JOB_NAME} BUILD_ID: ${env.BUILD_ID} WORKSPACE: ${env.WORKSPACE} Successful&quot;, teamDomain: &apos;opstree&apos;, tokenCredentialId: &apos;slack-tokenn&apos;, username: &apos;Ritesh Kumar&apos;)
            emailext(body: &apos;Build Success&apos;, recipientProviders: [developers()], replyTo: &apos;riteshkuma19325@gmail.com&apos;, subject: &apos;Pipeline 04&apos;, to: &apos;riteshkumar19325@gmail.com&apos;)
            // Actions to be executed only if the pipeline succeeds
        }
        failure {
            // Actions to be executed only if the pipeline fails
        }
        unstable {
            // Actions to be executed only if the pipeline is unstable
        }
        changed {
            // Actions to be executed only if the pipeline state changes
        }
    //success {
      //  echo &quot;${env.JOB_NAME}&quot;
    //    slackSend(channel: &apos;jenkins_report&apos;, color: &apos;#439FE0&apos;, message: &quot;JOB_NAME: ${env.JOB_NAME} BUILD_ID: ${env.BUILD_ID} WORKSPACE: ${env.WORKSPACE} Successful&quot;, teamDomain: &apos;opstree&apos;, tokenCredentialId: &apos;slack-tokenn&apos;, username: &apos;Ritesh Kumar&apos;)
      //  emailext(body: &apos;Build Success&apos;, recipientProviders: [developers()], replyTo: &apos;riteshkuma19325@gmail.com&apos;, subject: &apos;Pipeline 04&apos;, to: &apos;riteshkumar19325@gmail.com&apos;)
        //emailext(attachLog: true, body: &apos;&apos;, recipientProviders: [developers(), buildUser()], subject: &apos;Successfull COmpletion of JOb&apos;, to: &apos;riteshkumar19325@gmail.com&apos;)
        //emailext(body: &apos;A Test EMail&apos;, recipientProviders: [[$class: &apos;DevelopersRecipientProvider&apos;], [$class: &apos;RequesterRecipientProvider&apos;]], subject: &apos;Test&apos;)  
    //}
    //failure {
      //  echo &quot;${env.JOB_NAME}&quot;
        //slackSend(channel: &apos;jenkins_report&apos;, color: &apos;#439FE0&apos;, message: &quot;JOB_NAME: ${env.JOB_NAME} BUILD_ID: ${env.BUILD_ID} WORKSPACE: ${env.WORKSPACE} Un-Successful&quot;, teamDomain: &apos;opstree&apos;, tokenCredentialId: &apos;slack-tokenn&apos;, username: &apos;Ritesh Kumar&apos;)
    //}
}
</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>41945478</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>17318267</long>
      </entry>
      <entry>
        <string>run</string>
        <long>190231058</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>32541388</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>37547893</long>
      </entry>
    </timings>
    <sandbox>true</sandbox>
    <iota>7</iota>
    <head>1:7</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList"/>
</flow-build>